// <auto-generated />
using System;
using FAMS.Core.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FAMS.Core.Migrations
{
    [DbContext(typeof(FamsContext))]
    [Migration("20240301035934_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FAMS.Domain.Models.Entities.AssessmentScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssessmentSchemeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Assignment")
                        .HasColumnType("float");

                    b.Property<double>("Final")
                        .HasColumnType("float");

                    b.Property<double>("FinalPractice")
                        .HasColumnType("float");

                    b.Property<double>("FinalTheory")
                        .HasColumnType("float");

                    b.Property<double>("Passing")
                        .HasColumnType("float");

                    b.Property<double>("Quiz")
                        .HasColumnType("float");

                    b.Property<int>("SyllabusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId")
                        .IsUnique();

                    b.ToTable("AssessmentSchemes");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClassCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FSU")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("TrainingProgramCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassCode")
                        .IsUnique()
                        .HasFilter("[ClassCode] IS NOT NULL");

                    b.HasIndex("TrainingProgramCode")
                        .IsUnique();

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.ClassUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassUsers");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.DeliveryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TypeName")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Assignment/Lab"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Concept/Lecture"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "Guide/Review"
                        },
                        new
                        {
                            Id = 4,
                            TypeName = "Test/Quiz"
                        },
                        new
                        {
                            Id = 5,
                            TypeName = "Exam"
                        },
                        new
                        {
                            Id = 6,
                            TypeName = "Seminar/Workshop"
                        });
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.LearningObjective", b =>
                {
                    b.Property<string>("ObjectiveCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ObjectiveCode");

                    b.ToTable("LearningObjectives");

                    b.HasData(
                        new
                        {
                            ObjectiveCode = "LO01",
                            Description = "Understand the basics of object-oriented programming"
                        },
                        new
                        {
                            ObjectiveCode = "LO02",
                            Description = "Analyze and solve simple programming problems using loops and conditionals"
                        },
                        new
                        {
                            ObjectiveCode = "LO03",
                            Description = "Design and implement algorithms to manipulate data structures"
                        },
                        new
                        {
                            ObjectiveCode = "LO04",
                            Description = "Develop user-friendly graphical user interfaces for applications"
                        },
                        new
                        {
                            ObjectiveCode = "LO05",
                            Description = "Apply software testing techniques to ensure code quality and reliability"
                        },
                        new
                        {
                            ObjectiveCode = "749C",
                            Description = "Explore libraries, frameworks, and tools commonly used in software development with a focus on C#, such as ASP.NET Core or Entity Framework."
                        },
                        new
                        {
                            ObjectiveCode = "B73B",
                            Description = "Understand the basics of functional programming paradigms in C#, including immutability, higher-order functions, and lambda expressions."
                        },
                        new
                        {
                            ObjectiveCode = "EC56",
                            Description = "Explore advanced topics like concurrency, threading, and parallel programming in C#, and understand how to manage concurrent execution."
                        });
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.Syllabus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttendeeNumber")
                        .HasColumnType("int");

                    b.Property<string>("CourseObjective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PublishStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("SyllabusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SyllabusName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TechnicalRequirement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingMaterials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingPrinciples")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Syllabuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttendeeNumber = 35,
                            CreatedBy = "TungTS",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4583), new TimeSpan(0, 7, 0, 0, 0)),
                            Priority = "Active",
                            PublishStatus = (byte)1,
                            SyllabusCode = "SC01",
                            SyllabusName = "Basic Cross-Platform Application Programming With .NET",
                            UserId = 1,
                            Version = "1"
                        },
                        new
                        {
                            Id = 2,
                            AttendeeNumber = 35,
                            CreatedBy = "TungTS",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4589), new TimeSpan(0, 7, 0, 0, 0)),
                            Priority = "Inactive",
                            PublishStatus = (byte)1,
                            SyllabusCode = "SC02",
                            SyllabusName = "Software Testing",
                            UserId = 1,
                            Version = "1"
                        },
                        new
                        {
                            Id = 3,
                            AttendeeNumber = 35,
                            CreatedBy = "TungTS",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4590), new TimeSpan(0, 7, 0, 0, 0)),
                            Priority = "Active",
                            PublishStatus = (byte)1,
                            SyllabusCode = "SC03",
                            SyllabusName = "Software Requirements",
                            UserId = 1,
                            Version = "1"
                        });
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.SyllabusObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SyllabusObjectiveId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ObjectiveCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("SyllabusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveCode");

                    b.HasIndex("SyllabusId");

                    b.ToTable("SyllabusObjectives");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ObjectiveCode = "LO01",
                            SyllabusId = 1
                        },
                        new
                        {
                            Id = 2,
                            ObjectiveCode = "LO02",
                            SyllabusId = 1
                        },
                        new
                        {
                            Id = 3,
                            ObjectiveCode = "LO03",
                            SyllabusId = 2
                        });
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.TrainingContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrainingContentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<float?>("Duration")
                        .HasColumnType("real");

                    b.Property<string>("LearningObjectiveCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("TrainingFormat")
                        .HasColumnType("tinyint");

                    b.Property<int>("UnitCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryType");

                    b.HasIndex("LearningObjectiveCode");

                    b.HasIndex("UnitCode");

                    b.ToTable("TrainingContents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentName = "Learn Better in Winform",
                            DeliveryType = 1,
                            Duration = 20f,
                            LearningObjectiveCode = "LO01",
                            TrainingFormat = (byte)1,
                            UnitCode = 1
                        },
                        new
                        {
                            Id = 2,
                            ContentName = "Learn Better in JAVA",
                            DeliveryType = 2,
                            Duration = 25f,
                            LearningObjectiveCode = "LO02",
                            TrainingFormat = (byte)1,
                            UnitCode = 1
                        },
                        new
                        {
                            Id = 3,
                            ContentName = "Learn Better in C#",
                            DeliveryType = 3,
                            Duration = 15f,
                            LearningObjectiveCode = "LO03",
                            TrainingFormat = (byte)1,
                            UnitCode = 1
                        },
                        new
                        {
                            Id = 4,
                            ContentName = "Learn Better in C++",
                            DeliveryType = 4,
                            Duration = 10f,
                            LearningObjectiveCode = "LO04",
                            TrainingFormat = (byte)1,
                            UnitCode = 2
                        },
                        new
                        {
                            Id = 5,
                            ContentName = "Working in Project",
                            DeliveryType = 5,
                            Duration = 30f,
                            LearningObjectiveCode = "LO05",
                            TrainingFormat = (byte)1,
                            UnitCode = 2
                        });
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.TrainingProgram", b =>
                {
                    b.Property<int>("TrainingProgramCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingProgramCode"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("TopicCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TrainingProgramCode");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingPrograms");

                    b.HasData(
                        new
                        {
                            TrainingProgramCode = 1,
                            CreatedBy = "TungTs",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4658), new TimeSpan(0, 7, 0, 0, 0)),
                            Duration = 10f,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4660), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Training Program in C#",
                            StartTime = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4649), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = (byte)1,
                            UserId = 2
                        },
                        new
                        {
                            TrainingProgramCode = 2,
                            CreatedBy = "TungTs",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4663), new TimeSpan(0, 7, 0, 0, 0)),
                            Duration = 30f,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4664), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Beginner with C/C++",
                            StartTime = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4662), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = (byte)1,
                            UserId = 2
                        },
                        new
                        {
                            TrainingProgramCode = 3,
                            CreatedBy = "TungTs",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4666), new TimeSpan(0, 7, 0, 0, 0)),
                            Duration = 20f,
                            ModifiedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4667), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Learn how to make simple web in Java",
                            StartTime = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4666), new TimeSpan(0, 7, 0, 0, 0)),
                            Status = (byte)1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.TrainingProgramSyllabus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("SyllabusId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingProgramCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.HasIndex("TrainingProgramCode");

                    b.ToTable("TrainingProgramSyllabuses");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.TrainingUnit", b =>
                {
                    b.Property<int>("UnitCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitCode"), 1L, 1);

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<int>("SyllabusId")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("UnitCode");

                    b.HasIndex("SyllabusId");

                    b.ToTable("TrainingUnits");

                    b.HasData(
                        new
                        {
                            UnitCode = 1,
                            DayNumber = 100,
                            SyllabusId = 1,
                            UnitName = "FPT University"
                        },
                        new
                        {
                            UnitCode = 2,
                            DayNumber = 100,
                            SyllabusId = 1,
                            UnitName = "FPT Software"
                        });
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnType("char(2)");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "LongV",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4344), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "superadmin@example.com",
                            Gender = "Male",
                            Name = "Super Admin",
                            Password = "superadmin123",
                            PermissionId = "SA",
                            Phone = "123-456-7890",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "LongV",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4362), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "classadmin@example.com",
                            Gender = "Male",
                            Name = "Class Admin",
                            Password = "classadmin456",
                            PermissionId = "AD",
                            Phone = "987-654-3210",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "LongV",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4365), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nampt12@fpt.com",
                            Gender = "Male",
                            Name = "Phan Thanh Nam",
                            Password = "trainer789",
                            PermissionId = "TR",
                            Phone = "555-123-4567",
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "LongV",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 3, 1, 10, 59, 34, 166, DateTimeKind.Unspecified).AddTicks(4367), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ngoctb30@fpt.com",
                            Gender = "Female",
                            Name = "Tran Bao Ngoc",
                            Password = "reallystrongpass!",
                            PermissionId = "AD",
                            Phone = "091-3248-768",
                            Status = true
                        });
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.UserPermission", b =>
                {
                    b.Property<string>("PermissionId")
                        .HasColumnType("char(2)");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LearningMaterial")
                        .HasColumnType("tinyint");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Syllabus")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TrainingProgram")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UserManagement")
                        .HasColumnType("tinyint");

                    b.HasKey("PermissionId");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            PermissionId = "SA",
                            Class = (byte)5,
                            LearningMaterial = (byte)5,
                            RoleName = "Super Admin",
                            Syllabus = (byte)5,
                            TrainingProgram = (byte)5,
                            UserManagement = (byte)5
                        },
                        new
                        {
                            PermissionId = "AD",
                            Class = (byte)5,
                            LearningMaterial = (byte)5,
                            RoleName = "Class Admin",
                            Syllabus = (byte)5,
                            TrainingProgram = (byte)5,
                            UserManagement = (byte)1
                        },
                        new
                        {
                            PermissionId = "TR",
                            Class = (byte)2,
                            LearningMaterial = (byte)2,
                            RoleName = "Trainer",
                            Syllabus = (byte)2,
                            TrainingProgram = (byte)2,
                            UserManagement = (byte)1
                        });
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.AssessmentScheme", b =>
                {
                    b.HasOne("FAMS.Domain.Models.Entities.Syllabus", "Syllabus")
                        .WithOne("AssessmentScheme")
                        .HasForeignKey("FAMS.Domain.Models.Entities.AssessmentScheme", "SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.Class", b =>
                {
                    b.HasOne("FAMS.Domain.Models.Entities.TrainingProgram", "TrainingProgram")
                        .WithOne("Class")
                        .HasForeignKey("FAMS.Domain.Models.Entities.Class", "TrainingProgramCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.ClassUser", b =>
                {
                    b.HasOne("FAMS.Domain.Models.Entities.Class", "Class")
                        .WithMany("ClassUsers")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FAMS.Domain.Models.Entities.User", "User")
                        .WithMany("ClassUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.Syllabus", b =>
                {
                    b.HasOne("FAMS.Domain.Models.Entities.User", "User")
                        .WithMany("Syllabuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.SyllabusObjective", b =>
                {
                    b.HasOne("FAMS.Domain.Models.Entities.LearningObjective", "LearningObjective")
                        .WithMany("SyllabusObjectives")
                        .HasForeignKey("ObjectiveCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FAMS.Domain.Models.Entities.Syllabus", "Syllabus")
                        .WithMany("SyllabusObjectives")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LearningObjective");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.TrainingContent", b =>
                {
                    b.HasOne("FAMS.Domain.Models.Entities.DeliveryType", "Delivery")
                        .WithMany("TrainingContents")
                        .HasForeignKey("DeliveryType")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FAMS.Domain.Models.Entities.LearningObjective", "LearningObjective")
                        .WithMany("TrainingContents")
                        .HasForeignKey("LearningObjectiveCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FAMS.Domain.Models.Entities.TrainingUnit", "TrainingUnit")
                        .WithMany("TrainingContents")
                        .HasForeignKey("UnitCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("LearningObjective");

                    b.Navigation("TrainingUnit");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.TrainingProgram", b =>
                {
                    b.HasOne("FAMS.Domain.Models.Entities.User", "User")
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.TrainingProgramSyllabus", b =>
                {
                    b.HasOne("FAMS.Domain.Models.Entities.Syllabus", "Syllabus")
                        .WithMany("TrainingProgramSyllabuses")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FAMS.Domain.Models.Entities.TrainingProgram", "TrainingProgram")
                        .WithMany("TrainingProgramSyllabuses")
                        .HasForeignKey("TrainingProgramCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Syllabus");

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.TrainingUnit", b =>
                {
                    b.HasOne("FAMS.Domain.Models.Entities.Syllabus", "Syllabus")
                        .WithMany("TrainingUnits")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.User", b =>
                {
                    b.HasOne("FAMS.Domain.Models.Entities.UserPermission", "UserPermission")
                        .WithMany("Users")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserPermission");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.Class", b =>
                {
                    b.Navigation("ClassUsers");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.DeliveryType", b =>
                {
                    b.Navigation("TrainingContents");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.LearningObjective", b =>
                {
                    b.Navigation("SyllabusObjectives");

                    b.Navigation("TrainingContents");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.Syllabus", b =>
                {
                    b.Navigation("AssessmentScheme")
                        .IsRequired();

                    b.Navigation("SyllabusObjectives");

                    b.Navigation("TrainingProgramSyllabuses");

                    b.Navigation("TrainingUnits");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.TrainingProgram", b =>
                {
                    b.Navigation("Class");

                    b.Navigation("TrainingProgramSyllabuses");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.TrainingUnit", b =>
                {
                    b.Navigation("TrainingContents");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.User", b =>
                {
                    b.Navigation("ClassUsers");

                    b.Navigation("Syllabuses");

                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("FAMS.Domain.Models.Entities.UserPermission", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
